# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MotionProtocol

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from MotionProtocol.Remote import Remote
from typing import Optional
np = import_numpy()

class Message(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Message()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Message
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Message
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Message
    def Remote(self) -> Optional[Remote]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Remote()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def MessageStart(builder: flatbuffers.Builder):
    builder.StartObject(2)

def Start(builder: flatbuffers.Builder):
    MessageStart(builder)

def MessageAddType(builder: flatbuffers.Builder, type: int):
    builder.PrependInt8Slot(0, type, 0)

def AddType(builder: flatbuffers.Builder, type: int):
    MessageAddType(builder, type)

def MessageAddRemote(builder: flatbuffers.Builder, remote: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(remote), 0)

def AddRemote(builder: flatbuffers.Builder, remote: int):
    MessageAddRemote(builder, remote)

def MessageEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return MessageEnd(builder)
